This is an example of SQL queries I wrote for exploration of the publicly available chinook sample database. 
This work is created solely by me, but was informed using guidance from the UC Davis SQL for Data Science course available on the learning platform Coursera.
For clarity, I have included the database file and it's associated schema within the repository.
I used sqlite3 via command prompt to execute these commands. Outputs are included.

Show Table Information for Customers Table:
  PRAGMA table_info(Customers);

Output:
  cid                   name          type          notnull  dflt_value  pk
  --------------------  ------------  ------------  -------  ----------  --
  0                     CustomerId    INTEGER       1                    1
  1                     FirstName     NVARCHAR(40)  1                    0
  2                     LastName      NVARCHAR(20)  1                    0
  3                     Company       NVARCHAR(80)  0                    0
  4                     Address       NVARCHAR(70)  0                    0
  5                     City          NVARCHAR(40)  0                    0
  6                     State         NVARCHAR(40)  0                    0
  7                     Country       NVARCHAR(40)  0                    0
  8                     PostalCode    NVARCHAR(10)  0                    0
  9                     Phone         NVARCHAR(24)  0                    0
  10                    Fax           NVARCHAR(24)  0                    0
  11                    Email         NVARCHAR(60)  1                    0
  12                    SupportRepId  INTEGER       0                    0

Show Table Information for Invoice Table:
  PRAGMA table_info(Invoices);

Output:
  cid                   name               type           notnull  dflt_value  pk
  --------------------  -----------------  -------------  -------  ----------  --
  0                     InvoiceId          INTEGER        1                    1
  1                     CustomerId         INTEGER        1                    0
  2                     InvoiceDate        DATETIME       1                    0
  3                     BillingAddress     NVARCHAR(70)   0                    0
  4                     BillingCity        NVARCHAR(40)   0                    0
  5                     BillingState       NVARCHAR(40)   0                    0
  6                     BillingCountry     NVARCHAR(40)   0                    0
  7                     BillingPostalCode  NVARCHAR(10)   0                    0
  8                     Total              NUMERIC(10,2)  1                    0

Total Quantity and Revenue per Invoice (Top 10). Groups records by Invoice IDs (Invoice ID is not a primary key) to provide total quantities and revenue:
  SELECT InvoiceId,
      Count(Quantity) AS qty,
      UnitPrice * Count(Quantity) AS Total
  FROM invoice_items
  GROUP BY InvoiceId LIMIT 10;

Output:
  InvoiceId             qty  Tot
  --------------------  ---  -----
  1                     2    1.98
  2                     4    3.96
  3                     6    5.94
  4                     9    8.91
  5                     14   13.86
  6                     1    0.99
  7                     2    1.98
  8                     2    1.98
  9                     4    3.96
  10                    6    5.94


Total Quantity and Revenue per Invoice (Top 10, Ordered by Total Revenue). Gives us highest revenue invoices:
  SELECT InvoiceId,
      Count(Quantity) AS qty,
      UnitPrice * Count(Quantity) AS Total
  FROM invoice_items
  GROUP BY InvoiceId
  ORDER BY Total DESC LIMIT 10;

Output:
  InvoiceId             qty  Total
  --------------------  ---  -----
  89                    14   27.86
  103                   14   27.86
  194                   14   27.86
  299                   14   27.86
  88                    9    17.91
  312                   9    17.91
  5                     14   13.86
  12                    14   13.86
  19                    14   13.86
  26                    14   13.86

Total Quantity and Revenue per Invoice (Top 10, Quantity >= 9, Ordered by Total Revenue):
  SELECT InvoiceId,
      Count(Quantity) AS qty,
      UnitPrice * Count(Quantity) AS Total
  FROM invoice_items
  GROUP BY InvoiceId
  HAVING Count(Quantity) >= 9
  ORDER BY Total DESC
  LIMIT 10;

Output:
  InvoiceId             qty  Total
  --------------------  ---  -----
  89                    14   27.86
  103                   14   27.86
  194                   14   27.86
  299                   14   27.86
  88                    9    17.91
  312                   9    17.91
  5                     14   13.86
  12                    14   13.86
  19                    14   13.86
  26                    14   13.86

Total Quantity and Revenue per Invoice (Quantity >= 9, InvoiceID > 100, Ordered by Total Revenue):
  SELECT InvoiceId,
      Count(Quantity) AS qty,
      UnitPrice * Count(Quantity) AS Total
  FROM invoice_items
  WHERE InvoiceID > 100
  GROUP BY InvoiceId
  HAVING Count(Quantity) >= 9
  ORDER BY Total DESC
  LIMIT 10;

Output:
  InvoiceId             qty  Total
  --------------------  ---  -----
  103                   14   27.86
  194                   14   27.86
  299                   14   27.86
  312                   9    17.91
  110                   14   13.86
  117                   14   13.86
  124                   14   13.86
  131                   14   13.86
  138                   14   13.86
  145                   14   13.86

Employee Full Name and Country Abbreviation:
  SELECT FirstName || ' ' || LastName AS FullName,
      SUBSTR(Country, 0, 3) AS Country
  FROM employees;

Output:
  FullName              Country
  --------------------  -------
  Andrew Adams          Ca
  Nancy Edwards         Ca
  Jane Peacock          Ca
  Margaret Park         Ca
  Steve Johnson         Ca
  Michael Mitchell      Ca
  Robert King           Ca
  Laura Callahan        Ca

Employee Full Name and Hire Year:
  SELECT FirstName || ' ' || LastName AS FullName,
      STRFTIME('%Y', HireDate) AS HireYear
  FROM employees;

Output:
  FullName              HireYear
  --------------------  --------
  Andrew Adams          2002
  Nancy Edwards         2002
  Jane Peacock          2002
  Margaret Park         2003
  Steve Johnson         2003
  Michael Mitchell      2003
  Robert King           2004
  Laura Callahan        2004

Employee Full Name, Hire Year, and Years Since Hire:
  SELECT FirstName || ' ' || LastName AS FullName,
      STRFTIME('%Y', HireDate) AS HireYear,
      CAST(STRFTIME('%Y', 'now') - STRFTIME('%Y', HireDate) AS INTEGER) AS YearsSinceHire
  FROM employees;

Output:
  FullName              HireYear  YearsSinceHire
  --------------------  --------  --------------
  Andrew Adams          2002      21
  Nancy Edwards         2002      21
  Jane Peacock          2002      21
  Margaret Park         2003      20
  Steve Johnson         2003      20
  Michael Mitchell      2003      20
  Robert King           2004      19
  Laura Callahan        2004      19

Current Date in 'YYYY MM DD' Format:
   SELECT STRFTIME('%Y %m %d','now') As CurrentDate;

Output:
  CurrentDate
  --------------------
  2023 11 20

Employee City Classification (Calgary or Other):
  SELECT EmployeeId,
      FirstName,
      LastName,
      City,
      CASE City
          WHEN 'Calgary' THEN 'Calgary'
          ELSE 'Other'
      END Calgary
  FROM Employees
  ORDER BY LastName, FirstName;

Output:
  EmployeeId            FirstName  LastName  City        Calgary
  --------------------  ---------  --------  ----------  -------
  1                     Andrew     Adams     Edmonton    Other
  8                     Laura      Callahan  Lethbridge  Other
  2                     Nancy      Edwards   Calgary     Calgary
  5                     Steve      Johnson   Calgary     Calgary
  7                     Robert     King      Lethbridge  Other
  6                     Michael    Mitchell  Calgary     Calgary
  4                     Margaret   Park      Calgary     Calgary
  3                     Jane       Peacock   Calgary     Calgary

Track Size Categories (Small, Medium, Large, Other)(Top 10):
  SELECT TrackId,
      Name,
      Bytes,
      CASE 
          WHEN Bytes < 300000 THEN 'small'
          WHEN Bytes >= 300001 AND Bytes <= 500000 THEN 'medium'
          WHEN Bytes >= 500001 THEN 'large'
          ELSE 'Other'
      END bytescategory
  FROM tracks
  LIMIT 10;

Output:
  TrackId               Name                                     Bytes     bytescategory
  --------------------  ---------------------------------------  --------  -------------
  1                     For Those About To Rock (We Salute You)  11170334  large
  2                     Balls to the Wall                        5510424   large
  3                     Fast As a Shark                          3990994   large
  4                     Restless and Wild                        4331779   large
  5                     Princess of the Dawn                     6290521   large
  6                     Put The Finger On You                    6713451   large
  7                     Let's Get It Up                          7636561   large
  8                     Inject The Venom                         6852860   large
  9                     Snowballed                               6599424   large
  10                    Evil Walks                               8611245   large

Number of Customers per Country (Ordered by Customer Count):
  SELECT Country,
      COUNT(*) AS NumberOfCustomers
  FROM Customers
  GROUP BY Country
  ORDER BY NumberOfCustomers DESC;

Output:
  Country               NumberOfCustomers
  --------------------  -----------------
  USA                   13
  Canada                8
  France                5
  Brazil                5
  Germany               4
  United Kingdom        3
  Portugal              2
  India                 2
  Czech Republic        2
  Sweden                1
  Spain                 1
  Poland                1
  Norway                1
  Netherlands           1
  Italy                 1
  Ireland               1
  Hungary               1
  Finland               1
  Denmark               1
  Chile                 1
  Belgium               1
  Austria               1
  Australia             1
  Argentina             1

Create a View: Customers By Country (Ordered by Customer Count):
  CREATE VIEW CustomersByCountry AS
  SELECT Country,
      COUNT(*) AS NumberOfCustomers
  FROM Customers
  GROUP BY Country
  ORDER BY NumberOfCustomers DESC;

  SELECT * FROM CustomersByCountry;

Output:
  Country               NumberOfCustomers
  --------------------  -----------------
  USA                   13
  Canada                8
  France                5
  Brazil                5
  Germany               4
  United Kingdom        3
  Portugal              2
  India                 2
  Czech Republic        2
  Sweden                1
  Spain                 1
  Poland                1
  Norway                1
  Netherlands           1
  Italy                 1
  Ireland               1
  Hungary               1
  Finland               1
  Denmark               1
  Chile                 1
  Belgium               1
  Austria               1
  Australia             1
  Argentina             1

